/*

    Haciendo un Snapshot Test:
    
        -Las pruebas de instant치neas (snapshot) 
        son 칰tiles para asegurarnos de que la UI no cambia de forma inesperada.

        -Un caso t칤pico de prueba de instant치neas:
            1-renderiza un componente de la UI, 
            2-toma una instant치nea 
            3-la compara con un archivo de instant치neas de referencia 
            almacenado junto a la prueba. 
        -La prueba fallar치 si las dos instant치neas no coinciden: 
            1-o bien el cambio es inesperado, 
            2-o la instant치nea de referencia necesita ser actualizada 
            a la nueva versi칩n del componente de la UI.

    -Vamos a crear un snapshot test para un componente Link 
    que renderizar치 un hiperv칤nculo.

        1-Creando el componente:
            Para ello, vamos a crear un archivo Link.js con el siguiente c칩digo.
            
                import React, {useState} from 'react';
 
                const STATUS = {
                    HOVERED: 'hovered',
                    NORMAL: 'normal',
                };
 
                const Link = ({page, children}) => {
                    const [status, setStatus] = useState(STATUS.NORMAL);
                
                    const onMouseEnter = () => {
                        setStatus(STATUS.HOVERED);
                    };
              
                    const onMouseLeave = () => {
                        setStatus(STATUS.NORMAL);
                    };
              
                    return (
                        <a
                          className={status}
                          href={page || '#'}
                          onMouseEnter={onMouseEnter}
                          onMouseLeave={onMouseLeave}
                        >
                            {children}
                        </a>
                    );
                };

                export default Link;
 


        2-Creando el archivo de test:
            Ahora vamos a crear un segundo archivo, de snapshot, llamado 游늮Link.test.js, 
            y vamos a usar las caracter칤sticas render y snapshot de React y Jest 
            para interactuar con los componentes y capturar lo que generan:

                import React from 'react';
                import renderer from 'react-test-renderer';
                import Link from '../Link';

                test('El enlace cambia la clase cuando se pasa por encima', () => {
                    
                    const component = renderer.create(
                        <Link page="http://www.digitalhouse.com">Digital House</Link>,
                    );
                    
                    let tree = component.toJSON();
                    expect(tree).toMatchSnapshot();
                
                    // activar manualmente el callback
                    tree.props.onMouseEnter();
                    // re-rendering
                    tree = component.toJSON();
                    expect(tree).toMatchSnapshot();
                        
                    // activar manualmente el callback
                    tree.props.onMouseLeave();
                    // re-rendering
                    tree = component.toJSON();
                    expect(tree).toMatchSnapshot();
                });

        3-Generando la instant치nea:
            Ahora, debemos generar la instant치nea con npm test, 
            con lo que obtendremos un archivo como el siguiente:

            exports[`Link changes the class when hovered 1`] = `
                <a
                  className="normal"
                  href="http://www.digitalhouse.com"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}>
                  Digital House
                </a>
            `;
 
            exports[`Link changes the class when hovered 2`] = `
                <a
                  className="hovered"
                  href="http://www.digitalhouse.com"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}>
                  Digital House
                </a>
            `;
 
            exports[`Link changes the class when hovered 3`] = `
                <a
                  className="normal"
                  href="http://www.digitalhouse.com"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}>
                  Digital House
                </a>
            `;

        4-Actualizando la instant치nea:
            Es muy f치cil detectar cuando una prueba de instant치nea falla 
            despu칠s de introducir un cambio.
            Cuando eso ocurre, simplemente debemos arreglar el problema, 
            y asegurarnos de que los snapshot tests se ejecutan con 칠xito otra vez.
            Vamos a probar el caso de cuando un test de instant치nea 
            est치 fallando debido a un cambio intencionado en la implementaci칩n. 
            Tal situaci칩n puede presentarse si intencionalmente 
            cambiamos la direcci칩n del enlace del componente Link en nuestro ejemplo. 
            Modifiquemos 游늮Link.test.js de la siguiente forma:
            
                ...
            
                test('El enlace cambia la clase cuando se pasa por encima', () => {
                  const tree = renderer
                    .create(<Link page="http://www.instagram.com">Instagram</Link>)
                    .toJSON();
                  expect(tree).toMatchSnapshot();
                	...
                });
            En ese caso, Jest imprimir치 un error en la salida:
            Ya que s칩lo actualizamos nuestro componente para que apunte 
            a una direcci칩n diferente, 
            es razonable esperar cambios en la instant치nea de este componente. 
            Nuestro test de instant치nea est치 fallando porque la instant치nea 
            de nuestro componente actualizado ya no concuerda con el artefacto 
            de instant치neas para este caso de test.
            Para resolver esto, necesitamos actualizar nuestra snapshot 
            ejecutando jest --updateSnapshot.




*/